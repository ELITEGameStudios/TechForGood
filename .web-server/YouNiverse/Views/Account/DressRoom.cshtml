@model DressRoomViewModel;

@{
	ViewData["Title"] = "Dress Room";
}

<div class="all-things">
	<h1>Dress Room</h1>

	<div class="parent">
		<div class="tabs">
			<form method="post">
				@foreach (EItemSlot slot in Enum.GetValues(typeof(EItemSlot)))
				{
					<div class="tab">
						@if ((int)slot == 0)
						{
							<input type="radio" id="@slot.ToString()" name="item-tabs" checked>
						}
						else
						{
							<input type="radio" id="@slot.ToString()" name="item-tabs">
						}
						<label class="tab-label" for="@slot.ToString()">@EnumHelpers.GetDisplayName(@slot)</label>

						<div class="content">
							@foreach (var unlockedItem in Model.UnlockedCategories[(int)slot].UnlockedItems)
							{
								<label>
									@if (Model.SelectedItems.Length > (int)slot && Model.SelectedItems[(int)slot] ==
																unlockedItem.Id)
									{
										<input type="radio" class="item-button" name="SelectedItems[@((int)slot)]"
											value="@unlockedItem.Id"
											onclick="updateDisplay('slot-@(Enum.GetName(typeof(EItemSlot), slot))', @unlockedItem.Id)"
											checked>
									}
									else
									{
										<input type="radio" class="item-button" name="SelectedItems[@((int)slot)]"
											value="@unlockedItem.Id"
											onclick="updateDisplay('slot-@(Enum.GetName(typeof(EItemSlot), slot))', @unlockedItem.Id)">
									}
									<img src="/items/@(unlockedItem.Id + "_preview.png")">
								</label>
							}
						</div>

						<input type="hidden" name="SelectedItems[@((int)slot)]" value="-1">
					</div>
				}

				<input type="color" id="skin-color-picker" asp-for="SkinColor" oninput="updateSkinColor()">

				<input type="submit" value="Save">
			</form>
		</div>

		@foreach (EItemSlot slot in Enum.GetValues(typeof(EItemSlot)))
		{
			<div class="item-slot-display @(slot == EItemSlot.Base ? "item-slot-base" : "")"
				id="slot-@Enum.GetName(typeof(EItemSlot), slot)">
			</div>
		}
	</div>
</div>

<script>
	window.onload = () => {
		let buttons = document.getElementsByClassName("item-button");
		Array.from(buttons).forEach((button) => {
			if (button.checked) {
				button.onclick();
			}
		});

		updateSkinColor();
	};

	function updateDisplay(displayId, itemValue) {
		let div = document.getElementById(displayId);
		div.style.backgroundImage = `url("/items/${itemValue}.png")`;
	}

	function updateSkinColor() {
		let color = document.getElementById("skin-color-picker").value;

		let bases = document.getElementsByClassName("item-slot-base");
		Array.from(bases).forEach((base) => {
			base.style.backgroundColor = color;
		});
	}
</script>

<style>
	#skin-color-picker {
		position: fixed;
		left: 435px;
		height: 40px;
		top: 110px;
	}

	.all-things {
		width: 100%;
		padding: 10px;
		box-sizing: border-box;
		user-select: none;
	}

	.parent {
		display: flex;
		flex-direction: row;
		height: calc(100% - 150px);
		position: absolute;
	}

	.text-right {
		text-align: right;
		float: right;
	}

	.tabs {
		position: relative;
		min-height: 200px;
		/* This part sucks */
		clear: both;
		margin: 25px 0;

		width: 600px;
	}

	.tab {
		float: left;
	}

	.tab>label {
		background: #eee;
		padding: 10px;
		border: 1px solid #ccc;
		margin-left: -1px;
		position: relative;
		left: 1px;
	}

	.tab>label:hover {
		background: rgb(246, 246, 246);
		padding: 10px;
		border: 1px solid #ccc;
		margin-left: -1px;
		position: relative;
		left: 1px;
	}

	.tab [type=radio] {
		display: none;
	}

	.content {
		position: absolute;
		top: 28px;
		left: 0;
		background: white;
		right: 0;
		bottom: 0;
		padding: 20px;
		border: 1px solid #ccc;
	}

	[type=radio]:checked~label {
		background: white;
		border-bottom: 1px solid white;
		z-index: 2;
	}

	[type=radio]:checked~label~.content {
		z-index: 1;
	}

	.item-button[type="radio"] {
		position: absolute;
		opacity: 0;
		width: 0;
		height: 0;
	}

	.item-button[type="radio"]+img {
		cursor: pointer;
		border: 2px solid transparent;
		transition: border 0.3s ease;
		border-radius: 8px;
		width: 64px;
		height: 64px;
	}

	.item-button[type="radio"]:checked+img {
		border: 2px solid #0078D7;
	}

	input[type="submit"] {
		position: relative;
		bottom: 10px;
		left: 128px;
	}

	.item-slot-display {
		background-image: url(/items/blank.png);
		position: fixed;
		background-size: 600%;
		width: 500px;
		height: 800px;
		left: 700px;
		top: 30px;
	}

	.item-slot-base {
		background-blend-mode: multiply;
		mask-image: url("/items/base_mask.png");
		mask-size: 600%;
	}

	#slot-Base {
		z-index: 100;
	}

	#slot-Head {
		z-index: 106;
	}

	#slot-Face {
		z-index: 102;
	}

	#slot-Shirt {
		z-index: 107;
	}

	#slot-Pants {
		z-index: 104;
	}

	#slot-Shoes {
		z-index: 105;
	}
</style>